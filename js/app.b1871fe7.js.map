{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App.vue?8df6","webpack:///./src/App.vue","webpack:///./src/router/index.js","webpack:///./src/store/dataManage/actions.js","webpack:///./src/store/dataManage/state.js","webpack:///./src/store/dataManage/mutations.js","webpack:///./src/store/dataManage/getters.js","webpack:///./src/store/dataManage/index.js","webpack:///./src/store/testMod/matter.js","webpack:///./src/store/testMod/mat.js","webpack:///./src/store/testMod/index.js","webpack:///./src/store/sudoku/actions.js","webpack:///./src/store/sudoku/state.js","webpack:///./src/store/sudoku/mutations.js","webpack:///./src/store/sudoku/getters.js","webpack:///./src/store/sudoku/sudokuFront/actions.js","webpack:///./src/store/sudoku/sudokuFront/state.js","webpack:///./src/store/sudoku/sudokuFront/mutations.js","webpack:///./src/store/sudoku/sudokuFront/getters.js","webpack:///./src/store/sudoku/sudokuFront/index.js","webpack:///./src/store/sudoku/index.js","webpack:///./src/store/index.js","webpack:///./src/main.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","_vm","this","_h","$createElement","_c","_self","attrs","staticRenderFns","component","Vue","use","VueRouter","routes","path","process","MODE","router","base","getDataMain","context","log","getters","field","testget","fields","TEST","state","id","fieldsN","start","count","namespaced","mutations","actions","qwerty","test","commit","dispatch","testdispatch","testmut","matter","mat","initialization","rootGetters","selectedStringField","autoResolution","autoresolution","onlePossiblySwitch","onlyHereSwitch","allPossubly","noerror","possiblyApdated","advanchedPossibly","onePossibly","onlyHere","onePossubly","haspossibly","payload","possibly","size","forEach","item","allPossublyInSegment","segment","selectSegments","selectedrow","selectedcolumn","square","sudokuSquares","setFieldValue","has","every","undoLastValue","moveHistory","local","pop","exvalue","buttonid","unsave","testa","INITIALIZATION","stringField","a","Set","ONE_POSSIBLY_SWITCH","ONLY_HERE_SWITCH","POSSIBLY_APDATE","AUTO_RESOLUTIONS","SET_FIELD_VALUE","find","clear","ALL_ROW_POSSIBLY","add","delete","CYCLE_INIT","ALL_POSSIBLY","segmentPossibly","item2","ALL_COLUMN_POSSIBLY","ALL_SQUARE_POSSIBLY","squareValues","ROW_ONE_POSSIBLY","COLUMN_ONE_POSSIBLY","SQUARE_ONE_POSSIBLY","selectedsquare","ROW_ONLU_HERE","possiblyes","filter","indexOf","lastIndexOf","COLUMN_ONLU_HERE","SQUARE_ONLU_HERE","line","testgeetter","ButtonGetter","number","b","Math","floor","possibleField","index","fieldtest","possibleItemRow","selectButton","setTargetValue","selectedbutton","root","fieldview","right","bottom","rightbottom","UNSELECTBUTTON","bgcolor","SELECTBUTTON","SETTARGETVALUE","const","glow","element","sides","front","sudokuFront","Vuex","Store","dataManage","testMod","sudoku","config","productionTip","store","render","h","App","$mount"],"mappings":"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","file":"js/app.b1871fe7.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-03603e85\":\"7d86b964\",\"chunk-5c25b337\":\"e28a38f9\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"chunk-03603e85\":1,\"chunk-5c25b337\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({}[chunkId]||chunkId) + \".\" + {\"chunk-03603e85\":\"3119a9d5\",\"chunk-5c25b337\":\"86363a3f\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('router-view')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=7110743c&\"\nvar script = {}\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport VueRouter from 'vue-router'\n\nVue.use(VueRouter);\n\nconst routes = [\n  {\n    path: '/Sudoku', name: 'Sudoku', component: () => import('../views/Sudoku.vue')\n  },\n  {\n    path: '/', name: 'SudHomeoku', component: () => import('../views/Home.vue')\n  }\n];\nif (process.env.MODE !== 'ssr') {\n  routes.push({\n    path: '*',\n    component: () => import('../views/Home.vue')\n  })\n}\n\nconst router = new VueRouter({\n  //mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\n\nexport default router\n","export default {\n    getDataMain(context) {\n        // console.log('132')\n        //dispatch(\"receiveData.actions.getData\")\n        console.log('context.getters.Field')\n        console.log(context.getters.field)\n        //dispatch('receiveData/getData')\n        //console.log(receiveData)\n        //commit('TEST')\n        //console.log(commit)\n        //receiveData.actions.getData()\n        // context.commit('TEST')\n    },\n    testget() {\n        console.log('testget')\n    }\n}\n","export default {\n    fields: [\n        \"000000010400000000020000000000050407008000300001090000300400200050100000000806000\", // 17\n        \"800000000003600000070090200050007000000045700000100030001000068008500010090000400\", //sudoky Inkala\n        \"000090100004026089019503046097245600002070051560901000006000007800002090403010265\",\n        \"700000000249000080050000300300050000000096000006084700000670500000000049000049020\",\n        \"000001040000009006470000800000100470700598000010700030000003000002000000508400900\", //expert\n        \"065000019003000006000003000000000040100030007070526000080000970030050200910604000\", //hard\n        \"080296000430580006000003801004000000000300102010805470000010054000400080200058900\", //medium\n        \"000000000000000000000000000000000000000000000000000000000000000000000000000000000\", //dalee mnogo\n        '000000010400000000020000000000050604008000300001090000300400200050100000000807000', '000000012000035000000600070700000300000400800100000000000120000080000040050000600', '000000012003600000000007000410020000000500300700000600280000040000300500000000000', '000000012008030000000000040120500000000004700060000000507000300000620000000100000', '000000012040050000000009000070600400000100000000000050000087500601000300200000000', '000000012050400000000000030700600400001000000000080000920000800000510700000003000', '000000012300000060000040000900000500000001070020000000000350400001400800060000000', '000000012400090000000000050070200000600000400000108000018000000000030700502000000', '000000012500008000000700000600120000700000450000030000030000800000500700020000000', '000000012700060000000000050080200000600000400000109000019000000000030800502000000', '000000012800040000000000060090200000700000400000501000015000000000030900602000000', '000000012980000000000600000100700080402000000000300600070000300050040000000010000', '000000013000030080070000000000206000030000900000010000600500204000400700100000000', '000000013000200000000000080000760200008000400010000000200000750600340000000008000', '000000013000500070000802000000400900107000000000000200890000050040000600000010000', '000000013000700060000508000000400800106000000000000200740000050020000400000010000', '000000013000700060000509000000400900106000000000000200740000050080000400000010000', '000000013000800070000502000000400900107000000000000200890000050040000600000010000', '000000013020500000000000000103000070000802000004000000000340500670000200000010000', '000000013040000080200060000609000400000800000000300000030100500000040706000000000', '000000013040000080200060000906000400000800000000300000030100500000040706000000000', '000000013040000090200070000607000400000300000000900000030100500000060807000000000', '000000013040000090200070000706000400000300000000900000030100500000060807000000000', '000000013200800000300000070000200600001000000040000000000401500680000200000070000', '000000013400200000600000000000460500010000007200500000000031000000000420080000000', '000000013400800000200000070000400900001000000060000000000501600380000200000070000', '000000014000000203800050000000207000031000000000000650600000700000140000000300000', '000000014000020000500000000010804000700000500000100000000050730004200000030000600', '000000014000708000000000000104005000000200830600000000500040000030000700000090001', '000000014008005000020000000000020705100000000000000800070000530600140000000200000', '000000014008005000020000000000020805100000000000000700070000530600140000000200000', '000000014008009000020000000000020805100000000000000700070000930600140000000200000', '000000014700000000000500000090014000050000720000600000000900805600000900100000000', '000000014790000000000200000000003605001000000000000200060000730200140000000800000', '000000014970000000000200000000003605001000000000000200060000730200140000000800000', '000000015000400070300060000800000200000104000400500000000023600010000000070000000', '000000015000400070400000000609000300000100800000700000500030200000060040010000000', '000000015000800070300000000408000300000100400000700000500040200000090060010000000', '000000015000800070400000000609000300000100800000700000500030200000060040010000000', '000000015000830000000000200023000800000001000080000000105040000000600720900000000', '000000015000830000000000200026000800000001000080000000105040000000300720900000000', '000000015000900070400000000608000300000100800000700000500030200000060040010000000', '000000015000900070400000000609000300000100800000700000500030200000060040010000000', '000000015000900080300000000704000300000100400000800000500040200000070060010000000', '000000015000900080400000000704000300000100900000800000500030200000070060010000000', '000000015020060000000000408003000900000100000000008000150400000000070300800000060', '000000015040080000000000300000040260500107000900000000300500000080000400000900000', '000000015300600000000000080600050200000001000000000040010200700000760300008000000', '000000015790000000000200000000008706001000000000000900070000830400150000000300000', '000000016000500040300070000900000200000408000700600000000023700040000000010000000', '000000016000708000000000050501200000300000800600000000040000200000053000080010000', '000000016000900080500000000405000300000100500000800000600040200000030070010000000', '000000016040005000000020000000600430200010000300000500000003700100800000002000000', '000000016070000040050200000400060300000005200000041000000900780100000000000000000', '000000016070000040050200000400060300000008200000041000000500790100000000000000000', '000000016200000000000300000601700002000900500400000000030000800000060040050040000', '000000016200080000009000000000420500010000000000000200000106030500000780000900000', '000000017090600000000000030400500200001000000000080000720000600000410500000003000', '000000017090600000000000050200000803000050400000001000600200300041070000000000000', '000000017090800000000000040007060300050000200000001000600300800401000000000050000', '000000017300080000000000000007100006000040300085000000200000840010700000000500000', '000000017600020000000000000153000000000080200007000000400301500020000600000700000', '000000018020500000000000000040000700600000500000041000000700260108300000400000000','000000018050600000000000030400500200001000000000090000820000600000410700000003000','000000018200400000000000070000008003000500200010000000502000600000040300000017000','000000018320000000400000000008051000040000300000070000706000090000300700000200000','000000018700040000000000030420000700000001000000300000500070200601800000040000000','000000019000250000000000000091000030000400700030000000400000208200060500000001000','000000019030050000000000020109000000000400700000870000000102000060000800500000300','000000019030050000000000020109000000000400800000870000000102000060000700500000300','000000019070000030200800000050600200001000000000200000000019500600000400000030000','000000019300600000000000000600080500040000300000010000480000070000200400010900000','000000019500600000000000000600080500040000300000010000380000040000200700010900000','000000019500600000000000000600080500040000300000010000480000070000200400010900000','000000019500800000000000000300070500040000300000010000470000060000200400010900000','000000019800500000000000000300070500040000300000010000470000060000200400010900000','000000021000030070040080000100207000050000400000000003200100000000040500000600000','000000021000083000000040000500200070080000400030900000000060800100500000200000000','000000021000083000000040000500200070080000400030900000000060800100700000200000000','000000021000306000000800000400010600000700300200000000000090040530000000086000000','000000021000407000000008000031060000000000750020000000500210000400000800000300000','000000021000500030400600000000021000800000007500000600000400800010070000030000000','000000021004090000070000030100203000500800000006000000200000600000060400030000000','000000021005080000600000000000670300120000500400000000000201040003000000080000000','000000021006800000000000070070021000020000400000005000500430600100000000000600000','000000021030400000700000000100082000000000540000000000000560300290000000004700000','000000021030600000000080000201000050500400000000370000700002000080000300000000600','000000021040500000700000000100082000000000650000000000000610400320000000005700000','000000021040500000800000000700092000000000650000000000000610400320000000005800000','000000021040600000000000000201000050500800000000400300700020000060000800000300400','000000021050030000000800000102000070700300000000540000600002000030000400000000500','000000021060300000000708000100050040070000300000020000200040000000600800500000000','000000021060500000000090000400002000070000300000600000102400000000030640800000000','000000021060700000000000000402000000000600300500000700000340050080000600100002000','000000021070030000000040000100205040030000800000100000200600000000070300600000000','000000021070030000000090000100205040030000800000100000200600000000070300600000000','000000021070300000000000000402000000000700300600000800000540060090000500100002000','000000021070300000000408000100060050030000400000020000200050000000700800600000000','000000021080300000000409000100060050030000400000020000200070000000800900500000000','000000021090300000000000000402000000000700300600000700000540060080000500100002000','000000021090300000000060000201000050500400000000970000600002000080000300000000900','000000021090700000000000000000514000630000000000002000000600930001040000200000800','000000021300050000000000000500630000010000080000000500704000600600200000000108000','000000021300050000000000000500630000010000080000000900704000600600200000000108000','000000021300050000000000000500830000010000090000000500704000600600200000000109000','000000021300090000000000000500630000010000080000000500704000600600200000000108000','000000021300090000000000000500630000010000080000000900704000600600200000000108000','000000021300700000000000000060500300020000070000000800100040700500012000000006000','000000021300800000000000000060500700020000040000000300100040800500012000000006000','000000021300900000000000070200000400000060300000001000071040000000200508090000000','000000021400300000000000000000010600080000300020007000600000470500120000000800000','000000021400600000000000000000012800609000000000030000510000030000709600020000000','000000021400600000000000000000012900706000000000030000510000030000807600020000000','000000021430000000600000000201500000000006370000000000068000400000230000000070000','000000021500040000000000070000300600000020500010000000600000203003107000000008000','000000021500040000000600000031000080000070000020000000600300400405000700000200000','000000021500400000000000000300000570600080000000010000010605000082000000000007400','000000021500400000000800000021500000070000600000000030400000800300070000006020000','000000021503000000600000000000104060700000500000200000000480300010070000200000000','000000021600000030070900000000043700100000000000020000000600008002100000040000500','000000021700060000490000000000070900003800000020000000960000800000302000000100000','000000021700600000300500000000082000040010000500000000020040000000300700000000650','000000021750000000000000000070000890000201000000400000030090500100030000400000600','000000021800040000000000060090200000700000400000501000015000000000030900602000000','000000021800400000009000000600570040300000800000020000070900400021000000000000000','000000021800500000000060000030102000500000840000000000000780500620000000004000000','000000021800600000000050000030102000500000840000000000000780500620000000004000000','000000021800700000400005000023000060000800500010000000600000700000081000000030000','000000023000500080000100000020000900000400100580000000600009500000020070001000000','000000023000800010800400000032500000000000100070000000600070004100000500000003000','000000023010040000500000000100000400000200080000803000000050160040000700003000000','000000023010040000500000000100000400000200080000903000000050160040000700003000000','000000023010040000500000000100000400000600090000203000000050170040000800003000000','000000023010800000000000060300020000050000700000400000000507100002010000600000400','000000023080000070400020000030002000000000401000060500100000600000807000000300000','000000023080000070500090000030002000000000401000060500100000600000807000000300000','000000023300010000000500060400000700000106000000200000092000100000040800060000000','000000023400800000100000900050032000000000400000060000000401800030000050000900000','000000023400800000100000900050032000000000400000070000000401800030000060000900000','000000023480000000010000000503000060000010800000000000170000400000602000000300005','000000023600010000000400000000080700502000000000000100080203000010000640000500000','000000023600700000000000080000038500200000800000010000000200640003400000010000000','000000023800000050000100000010600400507030000000000000300052000064000100000000000','000000024000010000000000080107000900300800100000200000020400060500070300000000000','000000024000010000000000080307000100100800500000200000020400060500070300000000000','000000024000080010600005000000300700040700000010000000000040501300600000200000000','000000024007000000006000000500090100000300600020000000940000050000607300000800000','000000024010008000000070000600201500400000003000000000070000810500430000000000000',\n    ]\n}","export default{\n    TEST() {\n        console.log('test')\n    }\n}\n","export default {\n    field: state => id => state.fields[id],\n    fields: state => state.fields.slice(0,100),\n    fieldsN: state => (start,count) => {\n        count = (count<state.fields.length) ? count : state.fields.length\n        return state.fields.slice(start,count)\n    }\n}\n","import actions from \"./actions\";\nimport state from \"./state\";\nimport mutations from \"./mutations\"\nimport getters from \"./getters\"\nexport default {\n    namespaced: true,\n    state,\n    mutations,\n    getters,\n    actions\n}\n","const state = {\r\n    qwerty: 'qwerty'\r\n}\r\nconst actions = {\r\n    test (context) {\r\n        console.log('123654')\r\n        console.log(context.state.qwerty)\r\n    }\r\n}\r\nconst getters = {\r\n\r\n}\r\nconst mutations = {\r\n\r\n}\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    actions,\r\n    mutations\r\n}\r\n","const actions = {\r\n    test (context) {\r\n        //context.dispatch('test')\r\n        context.commit('testmut')\r\n        context.dispatch('testdispatch')\r\n    },\r\n    testdispatch() {\r\n        console.log('dispatch')\r\n    }\r\n}\r\nconst state = {}\r\nconst getters = {}\r\nconst mutations = {\r\n    testmut () {\r\n        console.log('testmut')\r\n    }\r\n}\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    getters,\r\n    actions,\r\n    mutations\r\n}\r\n","import matter from './matter';\r\nimport mat from './mat';\r\nexport default {\r\n    namespaced: true,\r\n    modules: {\r\n        matter: {\r\n            ...matter\r\n        },\r\n        mat: {\r\n            ...mat\r\n        }\r\n    },\r\n    actions: {\r\n        test(context) {\r\n            context.dispatch('matter/test')\r\n        }\r\n    }\r\n}\r\n","export default {\r\n    initialization(context, id) {\r\n        //context.dispatch('testinit')\r\n        //console.log(context.rootGetters['dataManage/field'](id))\r\n        context.commit('INITIALIZATION', context.rootGetters['dataManage/field'](id))\r\n        //context.dispatch('selectRows')\r\n        context.dispatch('allPossubly')\r\n        context.dispatch('front/initialization', context.state.selectedStringField)\r\n        //context.dispatch('allPossubly')\r\n    },\r\n    autoResolution(context) {\r\n        context.commit('AUTO_RESOLUTIONS')\r\n        if (context.state.autoresolution) {\r\n            context.dispatch('onePossubly')\r\n        }\r\n    },\r\n    onlePossiblySwitch(context) {\r\n        if (context.state.autoresolution) {\r\n            context.commit('AUTO_RESOLUTIONS')\r\n        }\r\n        context.commit('ONE_POSSIBLY_SWITCH')\r\n        context.dispatch('allPossubly')\r\n    },\r\n    onlyHereSwitch(context) {\r\n        if (context.state.autoresolution) {\r\n            context.commit('AUTO_RESOLUTIONS')\r\n        }\r\n        context.commit('ONLY_HERE_SWITCH')\r\n        context.dispatch('allPossubly')\r\n    },\r\n    allPossubly(context) {\r\n        var noerror = 0\r\n        context.commit('CYCLE_INIT')\r\n        //context.dispatch('selectSegments')\r\n        context.commit('ALL_ROW_POSSIBLY')\r\n        context.commit('ALL_COLUMN_POSSIBLY')\r\n        context.commit('ALL_SQUARE_POSSIBLY')\r\n        //context.commit('POSSIBLY_APDATE')\r\n        while (context.state.possiblyApdated && noerror < 10000) {\r\n            noerror++\r\n            //console.log(noerror);\r\n            context.commit('POSSIBLY_APDATE')\r\n            //console.log('context.state.possiblyApdated')\r\n            if (context.state.advanchedPossibly.onePossibly) {\r\n                context.commit('ROW_ONE_POSSIBLY')\r\n                context.commit('COLUMN_ONE_POSSIBLY')\r\n                context.commit('SQUARE_ONE_POSSIBLY')\r\n                //console.log('state.onePossibly',context.state.advanchedPossibly.onePossibly)\r\n            }\r\n            if (context.state.advanchedPossibly.onlyHere) {\r\n                //console.log('state.onlyHere',context.state.advanchedPossibly.onlyHere)\r\n                context.commit('ROW_ONLU_HERE')\r\n                context.commit('COLUMN_ONLU_HERE')\r\n                context.commit('SQUARE_ONLU_HERE')\r\n            }\r\n        }\r\n        if (context.state.autoresolution) {\r\n            setTimeout(() => {\r\n                if (context.state.autoresolution) {\r\n                    context.dispatch('onePossubly')\r\n                }\r\n            }, 1000)\r\n        }\r\n        //context.dispatch('onePossubly')\r\n        //context.commit('ROW_ONLU_HERE')\r\n        context.commit('POSSIBLY_APDATE')\r\n    },\r\n    onePossubly(context) {\r\n        let haspossibly = false\r\n        let payload = {\r\n            value: null,\r\n            target: null\r\n        }\r\n        for (let i = 0; i < 81; i++) {\r\n            if (context.state.field[i].possibly.size === 1 && context.state.field[i].value === 0) {\r\n                haspossibly = true\r\n                //console.log(context.state.field[i].possibly)\r\n                //console.log(context.state.field[i].possibly.size)\r\n                context.state.field[i].possibly.forEach(item => {\r\n                    //console.log(item)\r\n                    payload.value = item\r\n                })\r\n                payload.target = i\r\n                //console.log(payload)\r\n            }\r\n        }\r\n        //console.log(payload)\r\n        if (haspossibly) {\r\n            context.dispatch('setFieldValue', payload)\r\n        }\r\n    },\r\n    /*FillInitialPossubility (context) {\r\n        context.commit('INITIALIZATION')\r\n    },*/\r\n    allPossublyInSegment(context, segment){\r\n        context.commit('ALL_POSSIBLY',segment)\r\n    },\r\n    selectSegments (context) {\r\n        for (let i = 0; i < 9; i++) {\r\n            let selectedrow = []\r\n            let selectedcolumn = []\r\n            let square = []\r\n            for (let j = 0; j < 9; j++) {\r\n                selectedrow.push(context.state.field[i*9+j])\r\n                selectedcolumn.push(context.state.field[i+j*9])\r\n                square.push(context.state.field[context.state.sudokuSquares[i][j]])\r\n            }\r\n            context.dispatch('allPossublyInSegment', selectedrow)\r\n            context.dispatch('allPossublyInSegment', selectedcolumn)\r\n            context.dispatch('allPossublyInSegment', square)\r\n        }\r\n    },\r\n    setFieldValue(context, payload) {\r\n        //console.log(payload)\r\n        if (context.state.selectedStringField[payload.target] === '0' &&\r\n            (context.state.field[payload.target].possibly.has(payload.value) || payload.value === 0)) {\r\n            //let a = new Set([1,2,3,4,5])\r\n            //a.delete(2)\r\n            //console.log(a)\r\n            context.commit('SET_FIELD_VALUE', payload)\r\n            context.dispatch('allPossubly')\r\n            if (context.state.field.every(item => item.value !== 0)) {\r\n                setTimeout(() => {\r\n                    console.log(\"Решено\")\r\n                }, 2000)\r\n            }\r\n        }\r\n    },\r\n    undoLastValue(context) {\r\n        if (context.state.autoresolution) {\r\n            context.commit('AUTO_RESOLUTIONS')\r\n        }\r\n        if (context.state.moveHistory.length) {\r\n            let local = context.state.moveHistory.pop()\r\n            //console.log(local)\r\n            context.dispatch('setFieldValue', {\r\n                value: local.exvalue,\r\n                target: local.buttonid,\r\n                unsave: true\r\n            })\r\n        }\r\n    }\r\n}","export default {\r\n    autoresolution: false,\r\n    possiblyApdated: true,\r\n    advanchedPossibly: {\r\n        onePossibly: false,\r\n        onlyHere: false\r\n    },\r\n    testa: 1,\r\n    field: false,\r\n    selectedStringField: '',\r\n    moveHistory: [],\r\n    sudokuSquares:[\r\n        [0, 1, 2, 9, 10, 11, 18, 19, 20],\r\n        [3, 4, 5, 12, 13, 14, 21, 22, 23],\r\n        [6, 7, 8, 15, 16, 17, 24, 25, 26],\r\n        [27, 28, 29, 36, 37, 38, 45, 46, 47],\r\n        [30, 31, 32, 39, 40, 41, 48, 49, 50],\r\n        [33, 34, 35, 42, 43, 44, 51, 52, 53],\r\n        [54, 55, 56, 63, 64, 65, 72, 73, 74],\r\n        [57, 58, 59, 66, 67, 68, 75, 76, 77],\r\n        [60, 61, 62, 69, 70, 71, 78, 79, 80]\r\n    ]\r\n}\r\n","export default {\r\n    INITIALIZATION(state, stringField) {\r\n        console.log('init')\r\n        state.advanchedPossibly.onePossibly = false\r\n        state.advanchedPossibly.onlyHere = false\r\n        state.selectedStringField = stringField\r\n        state.autoresolution = false\r\n        let a = []\r\n        for (let i = 0; i < stringField.length; i++) {\r\n            a.push({\r\n                id: i,\r\n                value: +stringField[i],\r\n                possibly: new Set()\r\n            })\r\n        }\r\n        state.field = a\r\n    },\r\n    ONE_POSSIBLY_SWITCH(state) {\r\n        state.advanchedPossibly.onePossibly = !state.advanchedPossibly.onePossibly\r\n        //console.log('state.onePossibly',state.advanchedPossibly.onePossibly)\r\n    },\r\n    ONLY_HERE_SWITCH(state) {\r\n        state.advanchedPossibly.onlyHere = !state.advanchedPossibly.onlyHere\r\n        //console.log('state.onlyHere',state.advanchedPossibly.onlyHere)\r\n    },\r\n    POSSIBLY_APDATE(state) {\r\n        state.possiblyApdated = !state.possiblyApdated\r\n    },\r\n    AUTO_RESOLUTIONS(state) {\r\n        //console.log('autoResolution')\r\n        state.autoresolution = !state.autoresolution\r\n    },\r\n    SET_FIELD_VALUE(state, payload) {\r\n        //console.log(payload)\r\n        if (!payload.unsave) {\r\n            state.moveHistory.push({\r\n                buttonid: payload.target,\r\n                exvalue: state.field.find(item => item.id === payload.target).value\r\n            })\r\n        }\r\n        state.field.find(item => item.id === payload.target).value = payload.value\r\n        state.field.find(item => item.id === payload.target).possibly.clear()\r\n\r\n    },\r\n    ALL_ROW_POSSIBLY(state) {\r\n        for (let i = 0; i < 9; i++) {\r\n            let selectedrow = new Set()\r\n            for (let j = 0; j < 9; j++) {\r\n                selectedrow.add(state.field[i * 9 + j].value)\r\n            }\r\n            for (let j = 0; j < 9; j++) {\r\n                if (!state.field[i * 9 + j].value) {\r\n                    //state.field[i * 9 + j].possibly = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n                    selectedrow.forEach(item => {\r\n                        state.field[i * 9 + j].possibly.delete(item)\r\n                    })\r\n                } else {\r\n                    state.field[i * 9 + j].possibly = new Set()\r\n                }\r\n            }\r\n        }\r\n    },\r\n    CYCLE_INIT(state) {\r\n        state.field.forEach(item => {\r\n            if (item.value === 0) {\r\n                item.possibly = new Set([1,2,3,4,5,6,7,8,9])\r\n            }\r\n        })\r\n    },\r\n    ALL_POSSIBLY(state, segment) {\r\n        //console.log(segment);\r\n        let segmentPossibly = new Set()\r\n        segment.forEach(item=>{\r\n            if (item.value !== 0) {\r\n                segmentPossibly.add(item.value)\r\n            }\r\n            //console.log(item.value);\r\n        })\r\n        segment.forEach(item=>{\r\n            segmentPossibly.forEach(item2 => {\r\n                item.possibly.delete(item2)\r\n            })\r\n        })\r\n    },\r\n    ALL_COLUMN_POSSIBLY(state) {\r\n        for (let i = 0; i < 9; i++) {\r\n            let selectedcolumn = new Set()\r\n            for (let j = 0; j < 9; j++) {\r\n                selectedcolumn.add(state.field[i + j * 9].value)\r\n            }\r\n            for (let j = 0; j < 9; j++) {\r\n                //state.field[i+j*9].possibly = new Set([0,1,2,3,4,5,6,7,8,9])\r\n                selectedcolumn.forEach(item => {\r\n                    state.field[i + j * 9].possibly.delete(item)\r\n                })\r\n            }\r\n        }\r\n    },\r\n    ALL_SQUARE_POSSIBLY(state) {\r\n        for (let i = 0; i < 9; i++) {\r\n            let square = []\r\n            let squareValues = new Set()\r\n            for (let j = 0; j < 9; j++) {\r\n                square.push(state.field[state.sudokuSquares[i][j]])\r\n                squareValues.add(state.field[state.sudokuSquares[i][j]].value)\r\n            }\r\n            for (let j = 0; j < 9; j++) {\r\n                squareValues.forEach(item => {\r\n                    square[j].possibly.delete(item)\r\n                })\r\n            }\r\n            /*let selectedsquare = new Set()\r\n            state.field.forEach(item => {\r\n                if(i === Math.floor(Math.floor(item.id/3) / 9) * 3 + Math.floor(item.id/3) % 3 ) {\r\n                    selectedsquare.add(item.value)\r\n                }\r\n            })*/\r\n        }\r\n    },\r\n    ROW_ONE_POSSIBLY(state) {\r\n        //console.log('ROW_ONE_POSSIBLY')\r\n        //let has = true\r\n        //while (has) {\r\n        //console.log('ROW_ONE_POSSIBLY')\r\n        //has = false\r\n        for (let i = 0; i < 9; i++) {\r\n\r\n            let selectedrow = new Set()\r\n            for (let j = 0; j < 9; j++) {\r\n                if (state.field[i * 9 + j].possibly.size === 1) {\r\n                    //has = true\r\n                    state.field[i * 9 + j].possibly.forEach(item => {\r\n                        //console.log(item === selectedrow)\r\n                        selectedrow.add(item)\r\n                    })\r\n                }\r\n            }\r\n            //console.log(selectedrow)\r\n            if (selectedrow.size > 0) {\r\n                for (let j = 0; j < 9; j++) {\r\n                    selectedrow.forEach(item => {\r\n                        if (state.field[i * 9 + j].possibly.size !== 1) {\r\n                            //has = true\r\n                            if (state.field[i * 9 + j].possibly.has(item)) {\r\n                                state.field[i * 9 + j].possibly.delete(item)\r\n                                //console.log(item)\r\n                                state.possiblyApdated = true\r\n                            } else {\r\n                                //console.log(false)\r\n                            }\r\n                            //state.field[i * 9 + j].possibly.delete(item)\r\n                        }\r\n                    })\r\n                }\r\n\r\n            }\r\n        }\r\n        //}\r\n    },\r\n    COLUMN_ONE_POSSIBLY(state) {\r\n        for (let i = 0; i < 9; i++) {\r\n            let selectedcolumn = new Set()\r\n            for (let j = 0; j < 9; j++) {\r\n                if (state.field[i + j * 9].possibly.size === 1) {\r\n                    state.field[i + j * 9].possibly.forEach(item => {\r\n                        selectedcolumn.add(item)\r\n                    })\r\n                }\r\n            }\r\n            //console.log(selectedrow)\r\n            if (selectedcolumn.size > 0) {\r\n                for (let j = 0; j < 9; j++) {\r\n                    selectedcolumn.forEach(item => {\r\n                        if (state.field[i + j * 9].possibly.size !== 1) {\r\n                            if (state.field[i + j * 9].possibly.has(item)) {\r\n                                state.field[i + j * 9].possibly.delete(item)\r\n                                //console.log(item)\r\n                                state.possiblyApdated = true\r\n                            } else {\r\n                                //console.log(false)\r\n                            }\r\n                            //state.field[i + j * 9].possibly.delete(item)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    },\r\n    SQUARE_ONE_POSSIBLY(state) {\r\n        //console.log('SQUARE_ONE_POSSIBLY')\r\n        for (let i = 0; i < 9; i++) {\r\n            let selectedsquare = new Set()\r\n            let square = []\r\n            for (let j = 0; j < 9; j++) {\r\n                square.push(state.field[state.sudokuSquares[i][j]])\r\n            }\r\n            for (let j = 0; j < 9; j++) {\r\n                if (square[j].possibly.size === 1) {\r\n                    square[j].possibly.forEach(item => {\r\n                        selectedsquare.add(item)\r\n                    })\r\n                }\r\n            }\r\n            if (selectedsquare.size > 0) {\r\n                for (let j = 0; j < 9; j++) {\r\n                    selectedsquare.forEach(item => {\r\n                        if (square[j].possibly.size !== 1) {\r\n                            if (square[j].possibly.has(item)) {\r\n                                square[j].possibly.delete(item)\r\n                                //console.log(item)\r\n                                state.possiblyApdated = true\r\n                            } else {\r\n                                //console.log(false)\r\n                            }\r\n                            square[j].possibly.delete(item)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    },\r\n    ROW_ONLU_HERE (state) {\r\n        for (let i = 0; i < 9; i++) {\r\n            let possiblyes = []\r\n            for (let j = 0; j < 9; j++) {\r\n                state.field[i*9+j].possibly.forEach(item => {\r\n                    possiblyes.push(item)\r\n                })\r\n            }\r\n            possiblyes = possiblyes.filter(value => {\r\n                if(possiblyes.indexOf(value) === possiblyes.lastIndexOf(value)) {\r\n                    return value\r\n                }\r\n            })\r\n            // if (possiblyes.length) {\r\n            //     console.log(i,possiblyes)\r\n            // }\r\n            possiblyes.forEach(item =>{\r\n            for (let j = 0; j < 9; j++) {\r\n                if (state.field[i*9+j].possibly.has(item) && state.field[i*9+j].possibly.size >1) {\r\n                    state.possiblyApdated = true\r\n                    state.field[i*9+j].possibly.clear()\r\n                    state.field[i*9+j].possibly.add(item)\r\n                }\r\n                //q.push([...state.field[1*9+j].possibly])\r\n                // for (let k = 0; k < 9; k++) {\r\n                // }\r\n            }\r\n        })\r\n            //q = q.filter ((value, index) => q.indexOf(value) == index)\r\n            //console.log(possiblyes)\r\n        }\r\n    },\r\n    COLUMN_ONLU_HERE (state) {\r\n        for (let i = 0; i < 9; i++) {\r\n            let possiblyes = []\r\n            for (let j = 0; j < 9; j++) {\r\n                state.field[i+j*9].possibly.forEach(item => {\r\n                    possiblyes.push(item)\r\n                })\r\n                //q.push([...state.field[1*9+j].possibly])\r\n                // for (let k = 0; k < 9; k++) {\r\n                // }\r\n            }\r\n            // q = q.sort()\r\n            // console.log(q)\r\n            possiblyes = possiblyes.filter(value => {\r\n                if(possiblyes.indexOf(value) === possiblyes.lastIndexOf(value)) {\r\n                    return value\r\n                }\r\n            })\r\n            // if (possiblyes.length) {\r\n            //     console.log(i,possiblyes)\r\n            // }\r\n            possiblyes.forEach(item =>{\r\n            for (let j = 0; j < 9; j++) {\r\n                if (state.field[i+j*9].possibly.has(item) && state.field[i+j*9].possibly.size >1) {\r\n                    state.possiblyApdated = true\r\n                    state.field[i+j*9].possibly.clear()\r\n                    state.field[i+j*9].possibly.add(item)\r\n                }\r\n                //q.push([...state.field[1*9+j].possibly])\r\n                // for (let k = 0; k < 9; k++) {\r\n                // }\r\n            }\r\n        })\r\n            //q = q.filter ((value, index) => q.indexOf(value) == index)\r\n            //console.log(possiblyes)\r\n        }\r\n    },\r\n    SQUARE_ONLU_HERE(state) {\r\n        for (let i = 0; i < 9; i++) {\r\n            let possiblyes = []\r\n            //let selectedsquare = new Set()\r\n            let square = []\r\n            for (let j = 0; j < 9; j++) {\r\n                square.push(state.field[state.sudokuSquares[i][j]])\r\n            }\r\n            square.forEach(line => {\r\n                line.possibly.forEach(item => {\r\n                    possiblyes.push(item)\r\n                })\r\n            })\r\n            //possiblyes = possiblyes.sort()\r\n            //console.log(i,possiblyes)\r\n            possiblyes = possiblyes.filter(value => {\r\n                if(possiblyes.indexOf(value) === possiblyes.lastIndexOf(value)) {\r\n                    return value\r\n                }\r\n            })\r\n            // console.log(i,possiblyes)\r\n            possiblyes.forEach(item =>{\r\n                square.forEach(line => {\r\n                    if (line.possibly.has(item) && line.size >1) {\r\n                        line.possibly.clear()\r\n                        line.possibly.add(item)\r\n                        // state.possiblyApdated = true\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    },\r\n}","export default {\r\n    field: state =>  state.field,\r\n    autoresolution: state =>  state.autoresolution,\r\n    advanchedPossibly: state => state.advanchedPossibly,\r\n    testgeetter: (state,id)=> {\r\n        let a = new Set()\r\n        console.log(id)\r\n        for (let i=0; i<9;i++) {\r\n            a.add(state.field[i].value)\r\n        }\r\n    },\r\n    ButtonGetter: state => number => {\r\n        console.log('ButtonGetter')\r\n        //console.log(number)\r\n        let b = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n        number = Math.floor(number/9) * 9\r\n        //console.log(number)\r\n        //let arr = state.field.slice(number,number+9)\r\n        //console.log(arr)\r\n        for(let i=0;i<9;i++) {\r\n            b.delete(state.field[number + i].value)\r\n        }\r\n        /*arr.forEach(item => {\r\n            b.delete(item)\r\n        })*/\r\n        return b\r\n\r\n\r\n\r\n        //console.log(number)\r\n        //console.log(state.field[id])\r\n        /*let a = new Set()\r\n        let b = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9])\r\n        for(let i=0;i<9;i++) {\r\n            a.add(state.field[number + i].value)\r\n        }\r\n        a.forEach(item =>{\r\n            b.delete(item)\r\n        })\r\n        return b*/\r\n    },\r\n      /* Uppgradedfield: state => {\r\n       },*/\r\n       possibleField: state => {\r\n              console.log('update')\r\n              let a = []\r\n              state.field.forEach((item, index) => {\r\n                     let b = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n                     b.splice(+item.value-1, !!item||0)\r\n                     console.log('1')\r\n                     a.push({\r\n                            id: index,\r\n                            value: item,\r\n                            possibly:b\r\n                     })\r\n              })\r\n              return a\r\n       },\r\n       fieldtest: (state, getters) => a => {\r\n           a = []\r\n           for (let i=0; i<9;i++) {\r\n               a.push(getters.testgeetter(i))\r\n           }\r\n         /*return {\r\n                a:[ [0, 0, 0, 0, 9, 0, 1, 0, 0],\r\n                [0, 0, 4, 0, 2, 6, 0, 8, 9],\r\n              [0, 1, 9, 5, 0, 3, 0, 4, 6],\r\n                  [0, 9, 7, 2, 4, 5, 6, 0, 0],\r\n                  [0, 0, 2, 0, 7, 0, 0, 5, 1],\r\n                  [5, 6, 0, 9, 0, 1, 0, 0, 0],\r\n                  [0, 0, 6, 0, 0, 0, 0, 0, 7],\r\n                  [8, 0, 0, 0, 0, 2, 0, 9, 0],\r\n                  [4, 0, 3, 0, 1, 0, 2, 6, 5]\r\n                    ]\r\n              }*/\r\n       },\r\n       possibleItemRow: (state, getters) => {\r\n              getters.possibleField\r\n       }\r\n}\r\n","export default {\r\n    initialization (context, payload) {\r\n        context.commit('INITIALIZATION', payload)\r\n    },\r\n    selectButton (context,id) {\r\n        context.commit('UNSELECTBUTTON')\r\n        if (+id>=0 && +id<=80) {\r\n        context.commit('SELECTBUTTON',id)\r\n        }\r\n    \r\n    },\r\n    setTargetValue (context, value) {\r\n        context.dispatch('sudoku/setFieldValue', {\r\n            target: context.state.selectedbutton,\r\n            value: value\r\n        }, { root: true })\r\n       // context.commit('SETTARGETVALUE',payload)\r\n    }\r\n}\r\n","export default {\r\n    fieldview: false,\r\n    right: [2,11,29,38,56,5,14,32,41,50,59,68,77,65,74],\r\n    bottom: [18,19,21,22,24,25,26,45,46,48,49,51,52,53],\r\n    rightbottom: [20,23,47,50],\r\n    selectedbutton: -1\r\n}\r\n","export default {\r\n    UNSELECTBUTTON (state) {\r\n        state.fieldview.forEach(item =>{item.bgcolor = 'white'})\r\n    },\r\n    SELECTBUTTON (state, id) {\r\n        state.selectedbutton = id\r\n        //console.log(id % 9)\r\n        //console.log(Math.floor(id / 9))\r\n        //console.log(Math.floor(Math.floor(id/3) / 9) * 3 + Math.floor(id/3) % 3)\r\n        state.fieldview.forEach(item =>{\r\n            if(item.id % 9 === id % 9 || Math.floor(item.id / 9) === Math.floor(id / 9) ||\r\n            (Math.floor(Math.floor(item.id/3) / 9) * 3 + Math.floor(item.id/3) % 3) ===\r\n            (Math.floor(Math.floor(id/3) / 9) * 3 + Math.floor(id/3) % 3)) {\r\n                //console.log('green')\r\n                item.bgcolor = 'rgba(255, 255, 0, 0.25)'\r\n            }\r\n        })\r\n        state.fieldview.find(item => item.id === id).bgcolor = 'rgba(255, 0, 0, 0.25)'\r\n    },\r\n    SETTARGETVALUE (state, value) {\r\n        console.log(state)\r\n        console.log(value)\r\n    },\r\n    INITIALIZATION (state, stringField) {\r\n        state.selectedbutton = -1\r\n        state.selectedStringField = stringField\r\n        let a = []\r\n        //console.log(stringField)\r\n        for (let i = 0; i < stringField.length; i++) { \r\n            // 0 -null sides: 0\r\n            // r -bottom\r\n            // b -right\r\n            // l -right and bottom\r\n            //console.log(stringField[i])\r\n            a.push({\r\n                id:i,\r\n                const: stringField[i] === '0' ? 'rgba(0, 0, 0, 0.5)' : 'black',\r\n                // glow - shine,light\r\n                glow: 0,\r\n                bgcolor: false\r\n            })\r\n        }\r\n        state.right.forEach(element => {\r\n            a.find(item => item.id === element).sides = 'r'\r\n        });\r\n        state.bottom.forEach(element => {\r\n            a.find(item => item.id === element).sides = 'b'\r\n        });\r\n        state.rightbottom.forEach(element => {\r\n            a.find(item => item.id === element).sides = 'l'\r\n        });\r\n        state.fieldview = a\r\n    }\r\n}\r\n","export default {\r\n    fieldview: state => state.fieldview,\r\n    selectedbutton: state => state.selectedbutton,\r\n}\r\n","import actions from \"./actions\";\r\nimport state from \"./state\";\r\nimport mutations from \"./mutations\"\r\nimport getters from \"./getters\"\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    mutations,\r\n    getters,\r\n    actions\r\n}\r\n","import actions from \"./actions\";\r\nimport state from \"./state\";\r\nimport mutations from \"./mutations\"\r\nimport getters from \"./getters\"\r\nimport sudokuFront from \"./sudokuFront\"\r\nexport default {\r\n    namespaced: true,\r\n    state,\r\n    mutations,\r\n    getters,\r\n    actions,\r\n    modules: {\r\n        front: {\r\n            ...sudokuFront\r\n        },\r\n    }\r\n}\r\n","import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport dataManage from './dataManage'\r\nimport testMod from './testMod'\r\nimport sudoku from './sudoku'\r\n// import example from './module-example'\r\n// import SudokuMethods from './getData/SudokuMethods'\r\n\r\nVue.use(Vuex);\r\n\r\nexport default function() {\r\n  return new Vuex.Store({\r\n    modules: {\r\n      dataManage,\r\n      testMod,\r\n      sudoku\r\n      // example\r\n      // SudokuMethods\r\n    }\r\n  })\r\n}\r\n","import Vue from 'vue'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport store from './store'\r\n\r\nVue.config.productionTip = false\r\n\r\nnew Vue({\r\n  router,\r\n  store,\r\n  render: h => h(App)\r\n}).$mount('#app')\r\n"],"sourceRoot":""}